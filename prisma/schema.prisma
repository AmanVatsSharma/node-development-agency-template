// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Blog post model
model BlogPost {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  excerpt     String
  content     String   @db.Text
  publishedAt DateTime
  readTime    Int      // Reading time in minutes
  category    String
  tags        String[] // Array of tags
  imageUrl    String
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  author      Author   @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
}

// Author model (for blog posts)
model Author {
  id        String     @id @default(cuid())
  name      String
  title     String     // Job title
  bio       String?    @db.Text
  avatar    String     // Avatar image URL
  email     String?    @unique
  website   String?
  linkedIn  String?
  twitter   String?
  github    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  blogPosts BlogPost[]
}

// Comments on blog posts
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  name      String   // Commenter's name
  email     String   // Commenter's email
  website   String?  // Commenter's website (optional)
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

// Resources (e-books, whitepapers, templates, etc.)
model Resource {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String   // ebook, whitepaper, template, video, webinar
  downloadUrl String
  imageUrl    String
  publishedAt DateTime
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Portfolio projects
model Project {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  clientName  String
  summary     String
  description String    @db.Text
  challenge   String?   @db.Text
  solution    String?   @db.Text
  outcome     String?   @db.Text
  imageUrl    String
  projectUrl  String?
  githubUrl   String?
  featured    Boolean   @default(false)
  completedAt DateTime?
  category    String
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  technologies Technology[] // Many-to-many relation
  testimonial  Testimonial?
}

// Technologies used in projects
model Technology {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  icon        String?
  category    String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  projects    Project[]
}

// Testimonials
model Testimonial {
  id         String   @id @default(cuid())
  quote      String   @db.Text
  authorName String
  position   String
  company    String
  avatar     String?
  rating     Int?     @default(5) // 1-5 rating
  featured   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations - one testimonial per project
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String   @unique
}

// Team members
model TeamMember {
  id         String   @id @default(cuid())
  name       String
  position   String
  bio        String   @db.Text
  avatar     String
  order      Int      @default(0) // For ordering in the team display
  linkedIn   String?
  twitter    String?
  github     String?
  website    String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Services offered
model Service {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  summary     String
  description String   @db.Text
  icon        String
  imageUrl    String?
  order       Int      @default(0)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Contact form submissions
model ContactSubmission {
  id        String    @id @default(cuid())
  name      String
  email     String
  company   String?
  phone     String?
  message   String    @db.Text
  service   String?
  budget    String?
  timeline  String?
  source    String?   // How did they find us
  status    String    @default("pending") // pending, contacted, closed
  notes     String?   @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Newsletter subscriptions
model NewsletterSubscription {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// User model (for CMS and admin access)
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  passwordHash  String
  role          String    @default("user") // user, editor, admin
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Centralized integration settings for Zoho and Google Ads
model IntegrationSettings {
  id                      String    @id @default(cuid())
  // Zoho CRM credentials and token state
  zohoClientId            String?
  zohoClientSecret        String?
  zohoRefreshToken        String?
  zohoAccessToken         String?
  zohoTokenExpiresAt      DateTime?
  lastZohoTokenRefreshAt  DateTime?

  // Google Ads basic configuration (client-side conversions)
  googleConversionId      String?   // e.g. AW-XXXXXXXXXX
  googleApiKey            String?
  // Mapping of event types to Google Ads conversion labels
  // Example: { "lead_submit": "abcdEFGHijk", "call_click": "LmnoPQRStuv" }
  googleEventLabels       Json?

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

// Local backup of leads and processing status
model Lead {
  id           String    @id @default(cuid())
  name         String?
  email        String?
  phone        String?
  message      String?
  source       String?
  campaign     String?
  leadSource   String?
  raw          Json?
  status       String    @default("pending") // pending, pushed, failed
  zohoLeadId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([createdAt])
  @@index([status])
}

// Logs for all integration interactions (Zoho + Google)
model IntegrationLog {
  id            String    @id @default(cuid())
  type          String               // e.g. "lead_submit", "call_click", "whatsapp_click", "newsletter_signup"
  provider      String               // e.g. "zoho", "google_ads"
  level         String    @default("info") // info, warn, error
  message       String
  statusCode    Int?
  request       Json?
  response      Json?
  error         String?
  correlationId String?
  createdAt     DateTime  @default(now())

  @@index([provider, createdAt])
  @@index([level, createdAt])
}

// Simple retry queue for failed submissions
model IntegrationRetry {
  id           String    @id @default(cuid())
  type         String               // "zoho_lead", "google_conversion"
  payload      Json
  attempts     Int       @default(0)
  maxAttempts  Int       @default(5)
  nextRunAt    DateTime  @default(now())
  lastError    String?
  status       String    @default("queued") // queued, succeeded, failed
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([status, nextRunAt])
  @@index([createdAt])
}

// AI Agent Configuration (OpenAI, Claude, Gemini)
model AIAgentConfig {
  id              String   @id @default(cuid())
  provider        String   @default("openai") // "openai", "claude", "gemini"
  apiKey          String?  // Encrypted API key
  model           String   @default("gpt-4o") // Model name (gpt-4o, claude-sonnet-4-5, gemini-2.0-flash-exp)
  agentName       String   @default("Nova") // Brand name for the AI agent
  agentRole       String   @default("AI Sales Assistant") // Agent's role
  companyName     String   @default("Vedpragya Bharat") // Your company name
  welcomeMessage  String   @default("Hi! I'm Nova, your AI assistant. How can I help you today?")
  systemPrompt    String   @db.Text // Base system prompt for the AI
  temperature     Float    @default(0.7) // AI creativity (0.0-1.0)
  maxTokens       Int      @default(2000) // Max response length
  enabled         Boolean  @default(true) // Enable/disable globally
  leadQualification Boolean @default(true) // Auto-qualify leads
  autoGreeting    Boolean  @default(true) // Show greeting on load
  greetingDelay   Int      @default(3000) // Delay in ms before showing greeting
  widgetPosition  String   @default("bottom-right") // Widget position
  primaryColor    String   @default("#3b82f6") // Widget theme color
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([enabled])
}

// AI Conversation History
model AIConversation {
  id              String   @id @default(cuid())
  sessionId       String   @unique // Unique session identifier
  visitorId       String?  // Anonymous visitor ID (from cookies)
  leadId          String?  // Links to Lead model if converted
  pageUrl         String   // Current page URL
  pagePath        String   // URL path (e.g., /pages/shopify-product-page-customization)
  pageTitle       String?  // Page title for context
  pageContext     Json?    // Page-specific context (services, pricing, etc.)
  messages        Json     // Array of {role: 'user'|'assistant', content: string, timestamp: string}
  metadata        Json?    // Additional metadata (user agent, location, etc.)
  status          String   @default("active") // active, converted, abandoned, closed
  leadCaptured    Boolean  @default(false) // Has lead information been captured?
  conversionData  Json?    // Captured lead data {name, email, phone, company, requirements}
  sentimentScore  Float?   // Overall conversation sentiment (-1 to 1)
  leadScore       Int?     // Lead quality score (0-100)
  messageCount    Int      @default(0) // Total messages in conversation
  lastMessageAt   DateTime @default(now()) // Last message timestamp
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([sessionId])
  @@index([leadCaptured])
  @@index([status])
  @@index([createdAt])
  @@index([lastMessageAt])
}

// AI Analytics and Performance Metrics
model AIAnalytics {
  id              String   @id @default(cuid())
  date            DateTime @db.Date // Daily metrics
  conversationId  String?  // Optional link to specific conversation
  pageUrl         String   // Page where interaction happened
  metric          String   // Metric type (engagement, conversion, cost, etc.)
  value           Float    // Metric value
  metadata        Json?    // Additional metric data
  createdAt       DateTime @default(now())

  @@index([date, metric])
  @@index([pageUrl])
}
